from scrapingAndProcessing import webScrape
from src import processQuery
from src import updatedPrompts
from src import updatedUtils

dataset_path = 'data/queries.txt'

def run_sequence(comparison_query_path, macro_path):
    current_idx = 0
    with open(comparison_query_path, 'r') as queryFile:
        new_query = queryFile.readline()
        mainEntity = processQuery.retreive_entity(new_query)
        scrapedImage = webScrape.get_rough_visualizations(mainEntity)
        additionalInformation = processQuery.describe_image(scrapedImage, new_query)

        # first get steps to make the cad model step by step , provide few examples for the model to understand better
        # get answers from a chosen model based on the structured query format provided by get_steps_prompt function
        # get the structured prompt for code generation from get_code_prompt function
        # using these steps, get some initial python code to run on freeCAD software
        # remove backticks etc. from the code generated by the LLM
        # write this macro into a file with the appropriate format 
        # run the PyAutoGUI sequence to put code into freeCAD software online and get back error code
        # until error message is not run, keep trying to get executable code by passing both the error and the current code
        # to the LLM

        # then vqa model is used to assess picture similarity of expected model and generated model
        # human feedback part may be skipped

        # since no external API call is being made, the part to store API keys in the environment is not needed therefore
        # it can be removed as well

        # for majority of functions described above, just need to change the system template prompt to suit our needs
        direct_steps_prompt = updatedPrompts.get_steps_prompt(new_query)
        direct_steps = processQuery.return_steps_to_build(direct_steps_prompt)
        direct_code_prompt = updatedPrompts.get_code_prompt(new_query, direct_steps, additionalInformation)

        # get_answers function is from llm.py which is responsible for putting information in function and asking llm to respond with code
        # direct_code_prompt contains all the elements that we have generated till now, including 
        # steps to build current model, additional information, original user query and examples to look from 
        direct_code = processQuery.get_working_code(direct_code_prompt)
        direct_code = updatedUtils.remove_backticks(direct_code)
        direct_code_macro_file_path = f"{macro_path}/query_{current_idx}_direct_attempt_0.FCMacro"
        updatedUtils.write_macro(direct_code, direct_code_macro_file_path)
        #get_mouse_coordinates()

        # PyAutoGUI sequence
        img_path = f"results/images/query_{current_idx}_direct_attempt_0.png"

        # platform is currently set to mac, specify it as argument here if running on windows (platform='windows')
        error_msg = updatedUtils.gui_sequence(direct_code_macro_file_path, img_path)
        
        error_iter = 0
        # Get an executable code
        if error_msg is not None:
            error, success_idx, new_code = processQuery.get_working_code(direct_code, error_msg, error_iter, initial_code=True)
            if error is None:
                img_path_for_captions = f"results/images/query_{current_idx}_direct_attempt_{success_idx}.png"
                code_for_refinement = new_code
            else:
                print("Could not get an executable code for this query... Skipping to next query")
        else:
            img_path_for_captions = img_path
            code_for_refinement = direct_code
            error, success_idx, new_code = processQuery.get_working_code(code_for_refinement, error_msg, initial_code=False, max_iters=5)
            if error is None:
                img_path_for_captions = f"results/images/query_{current_idx}_direct_attempt_{success_idx}.png"
                code_for_refinement = new_code
            else:
                print("Could not get an executable code for this query... Skipping to next query")